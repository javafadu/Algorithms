

* Divide the array to 2 parts
* left side numbers may equal with right side or left side has 1 more element
(3-3 or 4-3 or 5-5 or 6-5)
* Step1: get each element as separated by iteration
* Step2: get from lowest to highest element between two couples and merge them
* Step3: get from lowest to highest element between above merged arrays.

Time Complexity :  O(n log n)
Memory Usage : worst case-> O(n) ---> recursive

Notes (Turkish):
Diziyi ikiye bölüp oluşan alt kümeleri tekrar birleştirmeli sıralama algoritmasina alıyor ye böylece
dizi sürekli ikiye bölünmüş oluyor. Elemanlari ikişerli olarak karşılaştırıp sırlaı biçimde birlestiriyor,
daha sonra bu iki elemanlı alt kümeleri sıralı bicimde birlestirerek dort elemanlı alt kümeler elde ediyor.
Boyle devam ettiğimizde, örneğin dizimiz 16 elemanlı ise elimizde 8 elemanli, elemanları sıralı iki all küme
kalivor. Bu alt kümeleri de aynı şekilde siralı biçimde  birlestirdigimiz zaman dizimiz siralanmis oluvor.

TIME COMPLEXITY : en kötü durumda 0(nlogn) sürede zaman götürüyor.
Teorik olarak yukarldaki 3 algoritmadan da kısa zamanda işini görüyor denilebitir.
Bettek kullaniminda ise bu metodun onceki yontemlere gore dezavantaji var.
Birlestirmeli stralama 0(n)'lik bir ekstra bellek kullaniyor ki bu da boyutu büyük elemanlara sahip
cok elemanli dizileri siralarken kendini fazlasiyla belli edecektir.
